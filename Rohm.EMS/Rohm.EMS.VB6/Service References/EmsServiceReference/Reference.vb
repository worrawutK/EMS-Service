'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Runtime.Serialization

Namespace EmsServiceReference
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="EmsMachineRegisterInfo", [Namespace]:="http://schemas.datacontract.org/2004/07/Rohm.Ems"),  _
     System.SerializableAttribute()>  _
    Partial Public Class EmsMachineRegisterInfo
        Inherits Object
        Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
        
        <System.NonSerializedAttribute()>  _
        Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private AreaNameField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentLotNoField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentStandardRPMField As Double
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentTotalGoodField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentTotalNGField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CutTotalGoodField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CutTotalNGField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MCNoField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MachineTypeNameField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ProcessNameField As String
        
        <Global.System.ComponentModel.BrowsableAttribute(false)>  _
        Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
            Get
                Return Me.extensionDataField
            End Get
            Set
                Me.extensionDataField = value
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property AreaName() As String
            Get
                Return Me.AreaNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.AreaNameField, value) <> true) Then
                    Me.AreaNameField = value
                    Me.RaisePropertyChanged("AreaName")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentLotNo() As String
            Get
                Return Me.CurrentLotNoField
            End Get
            Set
                If (Object.ReferenceEquals(Me.CurrentLotNoField, value) <> true) Then
                    Me.CurrentLotNoField = value
                    Me.RaisePropertyChanged("CurrentLotNo")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentStandardRPM() As Double
            Get
                Return Me.CurrentStandardRPMField
            End Get
            Set
                If (Me.CurrentStandardRPMField.Equals(value) <> true) Then
                    Me.CurrentStandardRPMField = value
                    Me.RaisePropertyChanged("CurrentStandardRPM")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentTotalGood() As Integer
            Get
                Return Me.CurrentTotalGoodField
            End Get
            Set
                If (Me.CurrentTotalGoodField.Equals(value) <> true) Then
                    Me.CurrentTotalGoodField = value
                    Me.RaisePropertyChanged("CurrentTotalGood")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentTotalNG() As Integer
            Get
                Return Me.CurrentTotalNGField
            End Get
            Set
                If (Me.CurrentTotalNGField.Equals(value) <> true) Then
                    Me.CurrentTotalNGField = value
                    Me.RaisePropertyChanged("CurrentTotalNG")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CutTotalGood() As Integer
            Get
                Return Me.CutTotalGoodField
            End Get
            Set
                If (Me.CutTotalGoodField.Equals(value) <> true) Then
                    Me.CutTotalGoodField = value
                    Me.RaisePropertyChanged("CutTotalGood")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CutTotalNG() As Integer
            Get
                Return Me.CutTotalNGField
            End Get
            Set
                If (Me.CutTotalNGField.Equals(value) <> true) Then
                    Me.CutTotalNGField = value
                    Me.RaisePropertyChanged("CutTotalNG")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MCNo() As String
            Get
                Return Me.MCNoField
            End Get
            Set
                If (Object.ReferenceEquals(Me.MCNoField, value) <> true) Then
                    Me.MCNoField = value
                    Me.RaisePropertyChanged("MCNo")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MachineTypeName() As String
            Get
                Return Me.MachineTypeNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.MachineTypeNameField, value) <> true) Then
                    Me.MachineTypeNameField = value
                    Me.RaisePropertyChanged("MachineTypeName")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ProcessName() As String
            Get
                Return Me.ProcessNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ProcessNameField, value) <> true) Then
                    Me.ProcessNameField = value
                    Me.RaisePropertyChanged("ProcessName")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="EmsMachineOutputInfo", [Namespace]:="http://schemas.datacontract.org/2004/07/Rohm.Ems"),  _
     System.SerializableAttribute()>  _
    Partial Public Class EmsMachineOutputInfo
        Inherits Object
        Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
        
        <System.NonSerializedAttribute()>  _
        Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentLotNoField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentStandardRPMField As Double
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentTotalGoodField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CurrentTotalNGField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CutTotalGoodField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private CutTotalNGField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private IDField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MCNoField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ProcessNameField As String
        
        <Global.System.ComponentModel.BrowsableAttribute(false)>  _
        Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
            Get
                Return Me.extensionDataField
            End Get
            Set
                Me.extensionDataField = value
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentLotNo() As String
            Get
                Return Me.CurrentLotNoField
            End Get
            Set
                If (Object.ReferenceEquals(Me.CurrentLotNoField, value) <> true) Then
                    Me.CurrentLotNoField = value
                    Me.RaisePropertyChanged("CurrentLotNo")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentStandardRPM() As Double
            Get
                Return Me.CurrentStandardRPMField
            End Get
            Set
                If (Me.CurrentStandardRPMField.Equals(value) <> true) Then
                    Me.CurrentStandardRPMField = value
                    Me.RaisePropertyChanged("CurrentStandardRPM")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentTotalGood() As Integer
            Get
                Return Me.CurrentTotalGoodField
            End Get
            Set
                If (Me.CurrentTotalGoodField.Equals(value) <> true) Then
                    Me.CurrentTotalGoodField = value
                    Me.RaisePropertyChanged("CurrentTotalGood")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CurrentTotalNG() As Integer
            Get
                Return Me.CurrentTotalNGField
            End Get
            Set
                If (Me.CurrentTotalNGField.Equals(value) <> true) Then
                    Me.CurrentTotalNGField = value
                    Me.RaisePropertyChanged("CurrentTotalNG")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CutTotalGood() As Integer
            Get
                Return Me.CutTotalGoodField
            End Get
            Set
                If (Me.CutTotalGoodField.Equals(value) <> true) Then
                    Me.CutTotalGoodField = value
                    Me.RaisePropertyChanged("CutTotalGood")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property CutTotalNG() As Integer
            Get
                Return Me.CutTotalNGField
            End Get
            Set
                If (Me.CutTotalNGField.Equals(value) <> true) Then
                    Me.CutTotalNGField = value
                    Me.RaisePropertyChanged("CutTotalNG")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ID() As Integer
            Get
                Return Me.IDField
            End Get
            Set
                If (Me.IDField.Equals(value) <> true) Then
                    Me.IDField = value
                    Me.RaisePropertyChanged("ID")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MCNo() As String
            Get
                Return Me.MCNoField
            End Get
            Set
                If (Object.ReferenceEquals(Me.MCNoField, value) <> true) Then
                    Me.MCNoField = value
                    Me.RaisePropertyChanged("MCNo")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ProcessName() As String
            Get
                Return Me.ProcessNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ProcessNameField, value) <> true) Then
                    Me.ProcessNameField = value
                    Me.RaisePropertyChanged("ProcessName")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="EmsOutputRecordBLL", [Namespace]:="http://schemas.datacontract.org/2004/07/Rohm.Ems"),  _
     System.SerializableAttribute()>  _
    Partial Public Class EmsOutputRecordBLL
        Inherits Object
        Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
        
        <System.NonSerializedAttribute()>  _
        Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private IDField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private LotNoField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private MCNoField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ProcessNameField As String
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private RohmDateField As Date
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private StandardRPMField As Double
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private TotalGoodField As Integer
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private TotalNGField As Integer
        
        <Global.System.ComponentModel.BrowsableAttribute(false)>  _
        Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
            Get
                Return Me.extensionDataField
            End Get
            Set
                Me.extensionDataField = value
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ID() As Integer
            Get
                Return Me.IDField
            End Get
            Set
                If (Me.IDField.Equals(value) <> true) Then
                    Me.IDField = value
                    Me.RaisePropertyChanged("ID")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property LotNo() As String
            Get
                Return Me.LotNoField
            End Get
            Set
                If (Object.ReferenceEquals(Me.LotNoField, value) <> true) Then
                    Me.LotNoField = value
                    Me.RaisePropertyChanged("LotNo")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property MCNo() As String
            Get
                Return Me.MCNoField
            End Get
            Set
                If (Object.ReferenceEquals(Me.MCNoField, value) <> true) Then
                    Me.MCNoField = value
                    Me.RaisePropertyChanged("MCNo")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ProcessName() As String
            Get
                Return Me.ProcessNameField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ProcessNameField, value) <> true) Then
                    Me.ProcessNameField = value
                    Me.RaisePropertyChanged("ProcessName")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property RohmDate() As Date
            Get
                Return Me.RohmDateField
            End Get
            Set
                If (Me.RohmDateField.Equals(value) <> true) Then
                    Me.RohmDateField = value
                    Me.RaisePropertyChanged("RohmDate")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property StandardRPM() As Double
            Get
                Return Me.StandardRPMField
            End Get
            Set
                If (Me.StandardRPMField.Equals(value) <> true) Then
                    Me.StandardRPMField = value
                    Me.RaisePropertyChanged("StandardRPM")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property TotalGood() As Integer
            Get
                Return Me.TotalGoodField
            End Get
            Set
                If (Me.TotalGoodField.Equals(value) <> true) Then
                    Me.TotalGoodField = value
                    Me.RaisePropertyChanged("TotalGood")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property TotalNG() As Integer
            Get
                Return Me.TotalNGField
            End Get
            Set
                If (Me.TotalNGField.Equals(value) <> true) Then
                    Me.TotalNGField = value
                    Me.RaisePropertyChanged("TotalNG")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="EmsServiceReference.IReporter")>  _
    Public Interface IReporter
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IReporter/ReportActivity", ReplyAction:="http://tempuri.org/IReporter/ReportActivityResponse")>  _
        Sub ReportActivity(ByVal machineID As Integer, ByVal activityID As Integer, ByVal processID As Integer)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IReporter/ReportLotEnd", ReplyAction:="http://tempuri.org/IReporter/ReportLotEndResponse")>  _
        Sub ReportLotEnd(ByVal machineID As Integer, ByVal lotNo As String, ByVal inputQty As Integer, ByVal goodOutput As Integer, ByVal ngOutput As Integer, ByVal processID As Integer)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IReporter/ReportLotEnd2", ReplyAction:="http://tempuri.org/IReporter/ReportLotEnd2Response")>  _
        Sub ReportLotEnd2(ByVal machineID As Integer, ByVal lotNo As String, ByVal inputQty As Integer, ByVal goodOutput As Integer, ByVal ngOutput As Integer, ByVal processID As Integer, ByVal standardRPM As Single)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IReporter/RegisterMachine", ReplyAction:="http://tempuri.org/IReporter/RegisterMachineResponse")>  _
        Function RegisterMachine(ByVal mcInfo As EmsServiceReference.EmsMachineRegisterInfo) As EmsServiceReference.EmsMachineOutputInfo
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IReporter/SaveOutputInfo", ReplyAction:="http://tempuri.org/IReporter/SaveOutputInfoResponse")>  _
        Function SaveOutputInfo(ByVal mc As EmsServiceReference.EmsMachineOutputInfo) As Boolean
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IReporter/ReportOutput", ReplyAction:="http://tempuri.org/IReporter/ReportOutputResponse")>  _
        Sub ReportOutput(ByVal output As EmsServiceReference.EmsOutputRecordBLL)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IReporter/SetCurrentActivity", ReplyAction:="http://tempuri.org/IReporter/SetCurrentActivityResponse")>  _
        Function SetCurrentActivity(ByVal processName As String, ByVal mcNo As String, ByVal activityName As String, ByVal activityCategoryName As String) As Integer
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IReporterChannel
        Inherits EmsServiceReference.IReporter, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class ReporterClient
        Inherits System.ServiceModel.ClientBase(Of EmsServiceReference.IReporter)
        Implements EmsServiceReference.IReporter
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Sub ReportActivity(ByVal machineID As Integer, ByVal activityID As Integer, ByVal processID As Integer) Implements EmsServiceReference.IReporter.ReportActivity
            MyBase.Channel.ReportActivity(machineID, activityID, processID)
        End Sub
        
        Public Sub ReportLotEnd(ByVal machineID As Integer, ByVal lotNo As String, ByVal inputQty As Integer, ByVal goodOutput As Integer, ByVal ngOutput As Integer, ByVal processID As Integer) Implements EmsServiceReference.IReporter.ReportLotEnd
            MyBase.Channel.ReportLotEnd(machineID, lotNo, inputQty, goodOutput, ngOutput, processID)
        End Sub
        
        Public Sub ReportLotEnd2(ByVal machineID As Integer, ByVal lotNo As String, ByVal inputQty As Integer, ByVal goodOutput As Integer, ByVal ngOutput As Integer, ByVal processID As Integer, ByVal standardRPM As Single) Implements EmsServiceReference.IReporter.ReportLotEnd2
            MyBase.Channel.ReportLotEnd2(machineID, lotNo, inputQty, goodOutput, ngOutput, processID, standardRPM)
        End Sub
        
        Public Function RegisterMachine(ByVal mcInfo As EmsServiceReference.EmsMachineRegisterInfo) As EmsServiceReference.EmsMachineOutputInfo Implements EmsServiceReference.IReporter.RegisterMachine
            Return MyBase.Channel.RegisterMachine(mcInfo)
        End Function
        
        Public Function SaveOutputInfo(ByVal mc As EmsServiceReference.EmsMachineOutputInfo) As Boolean Implements EmsServiceReference.IReporter.SaveOutputInfo
            Return MyBase.Channel.SaveOutputInfo(mc)
        End Function
        
        Public Sub ReportOutput(ByVal output As EmsServiceReference.EmsOutputRecordBLL) Implements EmsServiceReference.IReporter.ReportOutput
            MyBase.Channel.ReportOutput(output)
        End Sub
        
        Public Function SetCurrentActivity(ByVal processName As String, ByVal mcNo As String, ByVal activityName As String, ByVal activityCategoryName As String) As Integer Implements EmsServiceReference.IReporter.SetCurrentActivity
            Return MyBase.Channel.SetCurrentActivity(processName, mcNo, activityName, activityCategoryName)
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="EmsServiceReference.IMonitor", CallbackContract:=GetType(EmsServiceReference.IMonitorCallback))>  _
    Public Interface IMonitor
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IMonitor/Connect", ReplyAction:="http://tempuri.org/IMonitor/ConnectResponse")>  _
        Sub Connect(ByVal areaID As Integer)
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IMonitorCallback
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IMonitor/MachineActivityChanged", ReplyAction:="http://tempuri.org/IMonitor/MachineActivityChangedResponse")>  _
        Sub MachineActivityChanged(ByVal machineID As Integer, ByVal activityID As Integer, ByVal processID As Integer)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IMonitor/MachineLotEnd", ReplyAction:="http://tempuri.org/IMonitor/MachineLotEndResponse")>  _
        Sub MachineLotEnd(ByVal machineID As Integer, ByVal lotNo As String, ByVal inputQty As Integer, ByVal goodOutput As Integer, ByVal ngOutput As Integer, ByVal processID As Integer, ByVal standardRPM As Single)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IMonitor/KeepAlive", ReplyAction:="http://tempuri.org/IMonitor/KeepAliveResponse")>  _
        Sub KeepAlive()
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IMonitorChannel
        Inherits EmsServiceReference.IMonitor, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class MonitorClient
        Inherits System.ServiceModel.DuplexClientBase(Of EmsServiceReference.IMonitor)
        Implements EmsServiceReference.IMonitor
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext)
            MyBase.New(callbackInstance)
        End Sub
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext, ByVal endpointConfigurationName As String)
            MyBase.New(callbackInstance, endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext, ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(callbackInstance, endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext, ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(callbackInstance, endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext, ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(callbackInstance, binding, remoteAddress)
        End Sub
        
        Public Sub Connect(ByVal areaID As Integer) Implements EmsServiceReference.IMonitor.Connect
            MyBase.Channel.Connect(areaID)
        End Sub
    End Class
End Namespace
